(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

module.exports = Emitify;

function Emitify() {
    if (!(this instanceof Emitify)) return new Emitify();

    this._all = {};
}

Emitify.prototype.on = function (event, callback) {
    var funcs = this._all[event];

    check(event, callback);

    if (funcs) funcs.push(callback);else this._all[event] = [callback];

    return this;
};

Emitify.prototype.addListener = Emitify.prototype.on;

Emitify.prototype.once = function (event, callback) {
    var self = this;

    check(event, callback);

    self.on(event, function fn() {
        callback.apply(null, arguments);
        self.off(event, fn);
    });

    return this;
};

Emitify.prototype.off = function (event, callback) {
    var events = this._all[event] || [];
    var index = events.indexOf(callback);

    check(event, callback);

    while (~index) {
        events.splice(index, 1);
        index = events.indexOf(callback);
    }

    return this;
};

Emitify.prototype.removeListener = Emitify.prototype.off;

Emitify.prototype.emit = function (event) {
    var args = [].slice.call(arguments, 1);
    var funcs = this._all[event];

    checkEvent(event);

    if (!funcs && event === 'error') throw args[0];

    funcs.forEach(function (fn) {
        fn.apply(null, args);
    });

    return this;
};

Emitify.prototype.removeAllListeners = function (event) {
    checkEvent(event);

    this._all[event] = [];

    return this;
};

function checkEvent(event) {
    if (typeof event !== 'string') throw Error('event should be string!');
}

function checkFn(callback) {
    if (typeof callback !== 'function') throw Error('callback should be function!');
}

function check(event, callback) {
    checkEvent(event);
    checkFn(callback);
}

})));
